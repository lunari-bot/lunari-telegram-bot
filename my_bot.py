import os
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
import openai
import traceback
import os

openai.api_key = os.getenv("OPENAI_API_KEY")
TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(level=logging.INFO)

subscribers = set()
user_zodiac_signs = {}
user_send_times = {}
user_birth_data = {}

MONTHS_RU = {
    "January": "—è–Ω–≤–∞—Ä—è", "February": "—Ñ–µ–≤—Ä–∞–ª—è", "March": "–º–∞—Ä—Ç–∞", "April": "–∞–ø—Ä–µ–ª—è",
    "May": "–º–∞—è", "June": "–∏—é–Ω—è", "July": "–∏—é–ª—è", "August": "–∞–≤–≥—É—Å—Ç–∞",
    "September": "—Å–µ–Ω—Ç—è–±—Ä—è", "October": "–æ–∫—Ç—è–±—Ä—è", "November": "–Ω–æ—è–±—Ä—è", "December": "–¥–µ–∫–∞–±—Ä—è"
}

HOROSCOPE_SIGNS = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

NATAL_DATE, NATAL_TIME, NATAL_PLACE = range(3)

def get_horoscope(sign, date):
    file_path = f"horoscopes/{sign}.txt"
    if not os.path.exists(file_path):
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            if line.startswith(date):
                return line.strip().split(': ', 1)[1]
    return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {date} –¥–ª—è {sign} –Ω–µ –Ω–∞–π–¥–µ–Ω."

from telegram.constants import ParseMode

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    subscribers.add(user_id)

    keyboard = [[KeyboardButton(sign) for sign in HOROSCOPE_SIGNS[i:i+3]] for i in range(0, 12, 3)]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    welcome_text = (
        "<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–æ—Ä–æ—Å–∫–æ–ø-–±–æ—Ç Lunari! ‚ú®</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "üîÆ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –ø–æ —Ç–≤–æ–µ–º—É –∑–Ω–∞–∫—É\n"
        "üåå –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "ü™ê –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞\n"
        "/today ‚Äî –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/unsubscribe ‚Äî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/settime ‚Äî –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞\n"
        "/natal ‚Äî –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞\n"
        "/help ‚Äî –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
    )

    try:
        with open("welcome.png", "rb") as photo:
            await context.bot.send_photo(chat_id=user_id, photo=photo, caption=welcome_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    except Exception as e:
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def handle_zodiac_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    sign = update.message.text.strip()
    if sign in HOROSCOPE_SIGNS:
        user_zodiac_signs[user_id] = sign
        await update.message.reply_text(f"–¢–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ‚Äî {sign}! –ò—Å–ø–æ–ª—å–∑—É–π /today –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ‚ú®")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    sign = user_zodiac_signs.get(user_id)
    if not sign:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —á–µ—Ä–µ–∑ /start")
        return

    now = datetime.now()
    today_date = now.strftime('%Y-%m-%d')
    day = now.strftime('%-d') if os.name != 'nt' else now.strftime('%#d')
    month_ru = MONTHS_RU.get(now.strftime('%B'), now.strftime('%B'))
    formatted_date = f"{day} {month_ru}"
    horoscope = get_horoscope(sign, today_date)

    await update.message.reply_text(f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} –Ω–∞ {formatted_date}:\n\n{horoscope}")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subscribers.discard(update.effective_chat.id)
    await update.message.reply_text("–¢—ã –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ üí´")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –í—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ‚ú®\n"
        "/today ‚Äî –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üîÆ\n"
        "/unsubscribe ‚Äî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è üí´\n"
        "/settime ‚Äî –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ üïí\n"
        "/natal ‚Äî –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ üåå"
    )

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if len(context.args) != 1:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30")
        return
    try:
        datetime.strptime(context.args[0], '%H:%M')
        user_send_times[user_id] = context.args[0]
        await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {context.args[0]}")
    except ValueError:
        await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 08:30")

def check_and_send_horoscopes(application):
    now = datetime.now()
    current_time = now.strftime('%H:%M')
    today_date = now.strftime('%Y-%m-%d')
    day = now.strftime('%-d') if os.name != 'nt' else now.strftime('%#d')
    month_ru = MONTHS_RU.get(now.strftime('%B'), now.strftime('%B'))
    formatted_date = f"{day} {month_ru}"

    for user_id in subscribers:
        if user_send_times.get(user_id) == current_time:
            sign = user_zodiac_signs.get(user_id)
            if sign:
                horoscope = get_horoscope(sign, today_date)
                application.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ú® –ù–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª–æ!\n\nüîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} –Ω–∞ {formatted_date}:\n\n{horoscope}"
                )

async def natal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üåå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    return NATAL_DATE

async def natal_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_birth_data[user_id] = {"date": update.message.text.strip()}
    await update.message.reply_text("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
    return NATAL_TIME

async def natal_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_birth_data[user_id]["time"] = update.message.text.strip()
    await update.message.reply_text("üåç –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è")
    return NATAL_PLACE

async def natal_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_birth_data[user_id]["place"] = update.message.text.strip()
    data = user_birth_data[user_id]

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ, –∫—Ä–∞—Å–∏–≤–æ–µ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è:\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['date']}\n"
        f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {data['time']}\n"
        f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['place']}\n\n"
        f"–û–ø–∏—à–∏ –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏, –ø—Ä–∏–∑–≤–∞–Ω–∏–µ, —á—É–≤—Å—Ç–≤–∞, —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ],
            temperature=0.8,
            max_tokens=1000
        )
        result = response.choices[0].message.content
        await update.message.reply_text(f"üåå –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã:\n\n{result}")

    except Exception as e:
        await update.message.reply_text(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:\n{e}")
        print("OpenAI error:", e)
        import traceback
        traceback.print_exc()



    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∞ ‚ú®")
    return ConversationHandler.END

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    natal_conv = ConversationHandler(
        entry_points=[CommandHandler("natal", natal_command)],
        states={
            NATAL_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, natal_date)],
            NATAL_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, natal_time)],
            NATAL_PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, natal_place)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(natal_conv)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("settime", set_time))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_zodiac_choice))

    scheduler = BackgroundScheduler()
    scheduler.add_job(check_and_send_horoscopes, "cron", minute="*", args=[app])
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    import asyncio
    nest_asyncio.apply()
    asyncio.run(main())

























